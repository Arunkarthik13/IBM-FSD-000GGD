package com.example.demo.service;

import java.util.UUID;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.example.demo.entity.UserEntity;
import com.example.demo.repository.UserRepository;
import com.example.demo.shared.UserDto;

@Service
public class UserserviceImpl implements UserService{

	
	private Environment env;
	
	 public UserRepository userRepository;
	 public BCryptPasswordEncoder bCryptPasswordEncoder;
	
	 
	 @Autowired 
	public UserserviceImpl(Environment env, UserRepository userRepository,
			BCryptPasswordEncoder bCryptPasswordEncoder) {
		super();
		this.env = env;
		this.userRepository = userRepository;
		this.bCryptPasswordEncoder = bCryptPasswordEncoder;
	}



	@Override
	public UserDto createUser(UserDto theUserDto)
	{
		theUserDto.setUserId(UUID.randomUUID());
		theUserDto.setPassword(bCryptPasswordEncoder.encode(theUserDto.getPassword()));
		ModelMapper mapper=new ModelMapper();
		mapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
		
		UserEntity userEntity=mapper.map(theUserDto, UserEntity.class);
		userEntity.setPassword(theUserDto.getBcrypetedPassword());
		userRepository.save(userEntity);
		UserDto uDto=mapper.map(userEntity, UserDto.class);
		
	}

}
